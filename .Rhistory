filter(n() == 12) %>%
ungroup() %>%
mutate(dest = reorder(dest, dep_delay)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
scale_fill_viridis() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 24) %>%
ungroup() %>%
mutate(dest = reorder(dest, dep_delay)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
scale_fill_viridis() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 6) %>%
ungroup() %>%
mutate(dest = reorder(dest, dep_delay)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
scale_fill_viridis() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 12)
flights %>%
group_by(dest, month)
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE))
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest)
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 12)
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 6) %>%
ungroup() %>%
mutate(dest = reorder(dest, dep_delay))
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 12) %>%
ungroup() %>%
mutate(dest = reorder(dest, dep_delay))
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 12) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
scale_fill_viridis() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 6) %>%
ungroup() %>%
mutate(dest = reorder(dest, dep_delay))
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 12) %>%
ungroup() %>%
mutate(dest = reorder(dest, dep_delay))
flights %>%
group_by(dest, month) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
group_by(dest) %>%
filter(n() == 12) %>%
ungroup() %>%
mutate(dest = reorder(dest, distance)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
scale_fill_viridis() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
flights
Sys.timezone()
library(tidyverse)
rnorm(100)
rnorm(100) %>% matrix(ncol=2)
rnorm(100) %>% matrix(ncol=2) %>% plot()
rnorm(100) %>% matrix(ncol=2) %>% plot() %>% str()
rnorm(100) %>% matrix(ncol=2) %T>% plot() %>% str()
mtcars %S% cor(disp, mpg)
mtcars %$% cor(disp, mpg)
library(magrittr)
mtcars %$% cor(disp, mpg)
mtcars %>% cor(disp, mpg)
!is.na(TRUE)
!is.na(FALSE)
x <- tibble(a = 1:2, b = 3:4)
library(tidyverse)
x <- tibble(a = 1:2, b = 3:4)
x[1]
x[,1]
x[1,]
x[2,2]
x[["a"]]
x["a"]
hms::hms(3600)
print(hms::hms(3600))
class(hms::hms(3600))
typeof(hms::hms(3600))
attributes(hms::hms(3600))
x <- tibble(a = 1:4, b = 3:4)
x <- tibble(a = 1:4, b = 3)
x
x <- tibble(a = 1:4, b = list(1, 2, TRUE, "aap"))
x
x[2,2]
library(tidyverse)
df <- tibble( a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))
df
range(df$a)
rescale01 < function(x){
rng <- range(x, na,rm = TRUE)
(x - rng[1] / (rng[2] - rng[1])
}
rescale01 <- function(x){
rng <- range(x, na,rm = TRUE)
(x - rng[1] / (rng[2] - rng[1]))
}
df$a <- rescale01(df$a)
rescale01 < function(x){
rng <- range(x, na.rm = TRUE)
(x - rng[1] / (rng[2] - rng[1]))
}
rescale01 <- function(x){
rng <- range(x, na.rm = TRUE)
(x - rng[1] / (rng[2] - rng[1]))
}
df$a <- rescale01(df$a)
df
df$b <- rescale01(df$b)
df$c <- rescale01(df$c)
df$d <- rescale01(df$d)
df
df[[1]]
df[1]
seq_along(df)
n <- sample(10,1)
n
means <- c(0,1,2)
output <- double()
for (i in seq_along(means)) {}
for (i in seq_along(means)) {
n <- sample(100,1)
output <- c(output, rnorm(n, means[[i]]))
}
str(output)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
source('~/.active-rstudio-document')
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
flip <- function() sample(c("T", "H"), 1)
flips <- 0
nheads <- 0
while (nheads <3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
x < c(1,2,3)
x <- c(1,2,3)
names(x)
for (nm in names(x))
print(nm)
}
for (nm in names(x)){}
for (nm in names(x)){
print(nm)
}
x <- c(a=1,2,c=3)
names(x)
for (nm in names(x)){
print(nm)
}
for (nm in names(x)){
print(nm)
print(x[[nm]])
}
x <- c(a=1,c=2,c=3)
names(x)
for (nm in names(x)){
print(nm)
print(x[[nm]])
}
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
source('~/.active-rstudio-document')
show_mean(iris)
shiny::runApp('Documents/Git/gosh_service_reporting/workspace/mini-apps/gosh_reporter')
library(aridhiaProjectTemplate)
options(scipen=999)
xap.require("ggplot2", "dplyr", "plotly", "reshape2", "stringr")
runApp('Documents/Git/gosh_service_reporting/workspace/mini-apps/gosh_reporter')
sample(1:10)
sample(1:100)
patients <- C("a", "b", "c", "d")
patients <- C('a', 'b', 'c', 'd')
library(dplyr)
patients <- C('a', 'b', 'c', 'd')
x <- c(1,2,3)
patients <- (1,2,3,4,5,6,7,8,9,10)
patients <- c(1,2,3,4,5,6,7,8,9,10)
ids <- c(,,,,1,,2,3,,)
ids <- c(NA,3,NA,1,2,NA,NA,NA,NA,4)
patient_ids <- data.frame(patients, ids)
patient_ids
i <- sample(1:10)
i
m <- max(patient_ids$ids, na.rm = TRUE)
m
patient_ids$ids[is.na(patient_ids$ids] <- m + i
patient_ids$ids[is.na(patient_ids$ids)] <- m + i
i <- sample(1:6)
patient_ids$ids[is.na(patient_ids$ids)] <- m + i
patient_ids
i
patient_ids <- data.frame(patients, ids)
patient_ids$ids[is.na(patient_ids$ids)] <- m + i
patient_ids
format(as.Date(Sys.Date()), "%d %B %Y")
x <- 1
y <- 2
z <- 3
xyz <-data.frame(x,y,z)
xyz
barplot(xyz)
xyz_transpose <- as.data.frame(t(as.matrix(xyz)))
xyz_transpose
barplot(xyz_transpose)
barplot(xyz_transpose$V1)
barplot(xyz$1)
barplot(xyz_transpose$V1)
my_string <- "test, two tests, three"
split_string <- strplit(my_string, ",")
split_string <- strsplit(my_string, ",")
split_string
no_ws <- lapply(split_string, trimws())
no_ws <- lapply(split_string, trimws(x))
no_ws <- lapply(split_string, trimws)
no_ws
quoted <- lapply(no_ws, dQuote)
quoted
my_result <- toString(quoted)
my_result
my_result <- collapse(quoted, ","))
my_result <- collapse(quoted, ",")
paste(c(a, b, c, d), collapse = ", ")
paste(c("a", "b", "c", "d"), collapse = ", ")
test <- paste(c("a", "b", "c", "d"), collapse = ", ")
test
install.packages("tibble")
load("~/Documents/Git/COVID-19-Clinical-trial-tracker/dat_processed_and_network.RData")
head(dat_processed_and_network)
long_list <- get(load("~/Documents/Git/COVID-19-Clinical-trial-tracker/dat_processed_and_network.RData"))
head(long_list)
write.csv("~/Documents/Git/COVID-19-Clinical-trial-tracker/covid_trials_20200721.csv", long_list, row.names = FALSE)
write.csv(long_list, "~/Documents/Git/COVID-19-Clinical-trial-tracker/covid_trials_20200721.csv", row.names = FALSE)
long_list$date_updated_trial
long_list$date_updated
long_list <- long_list %>% replace_na("")
library("dplyr")
long_list <- long_list %>% replace_na("")
library("tidyr")
long_list <- long_list %>% replace_na("")
long_list <- long_list %>% replace_na(list(date_updated = ""))
long_list$date_updated
long_list <- long_list$date_updated %>% replace_na("")
long_list[indx] <- lapply(long_list[indx],  function(x) replace(x, which(x==NA), ''))
long_list <- lapply(long_list,  function(x) replace(x, which(x==NA), ''))
long_list$date_updated <- as.character(long_list$date_updated)
long_list$date_updated[is.na(long_list$date_updated)] <- ''
long_list$date_updated
long_list$trial_start_date <- as.character(long_list$trial_start_date)
long_list$trial_start_date[is.na(long_list$trial_start_date)] <- ''
long_list$date_primary_completion <- as.character(long_list$date_primary_completion)
long_list$date_primary_completion[is.na(long_list$date_primary_completion)] <- ''
write.csv(long_list, "~/Documents/Git/COVID-19-Clinical-trial-tracker/covid_trials_20200721.csv", row.names = FALSE)
long_list <- get(load("~/Documents/Git/COVID-19-Clinical-trial-tracker/dat_processed_and_network.RData"))
write.csv(long_list, "~/Documents/Git/COVID-19-Clinical-trial-tracker/covid_trials_20200721.csv", row.names = FALSE)
setwd("~/Documents/Git/covid_trial_tracker")
library(dplyr)
library(DT)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinythemes)
library(tidyr)
library(lubridate)
library(purrr)
library(stringr)
date_data_transfer <- "2020-07-21"
trials <- get(load("data/dat_processed_and_network.RData"))
id <- rownames(trials)
trials <- cbind(id=id, trials)
trials_subset <- trials %>%
select(id,
trial_id,
scientific_title,
institution,
date_primary_completion,
expected_enrollment,
patient_setting,
study_design_final,
number_of_arms_final,
url,
corrected_treatment_name,
outcome)
expected_enrollment_max <- max(trials_subset$expected_enrollment, na.rm = TRUE)
study_design_levels <- levels(factor(trials_subset$study_design))
completion_date_min <- min(as.Date(trials_subset$date_primary_completion), na.rm = TRUE)
completion_date_max <- max(as.Date(trials_subset$date_primary_completion), na.rm = TRUE)
today <- Sys.Date()
today_plus_one_month <- Sys.Date() %m+% months(1)
treatments <- trials_subset$corrected_treatment_name %>%
strsplit(", ") %>% reduce(c) %>%
strsplit(" + ", fixed = TRUE) %>% reduce(c) %>%
unique() %>% sort()
outcomes <- trials_subset$outcome %>%
strsplit(", ") %>% reduce(c) %>%
unique() %>% sort()
runApp()
library(DT)
